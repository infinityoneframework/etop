defmodule Etop.Report do
  @moduledoc """
  Etop Reporting Helpers.

  A set of functions to use to parse and process Etop results.

  Example output

  ```
  ===========================================================================================================================
  nonode@nohost                                                                                                      08:22:56
  Load:  cpu     2.9%                      Memory:  total           42812208     binary    197472
         procs     92                               processes       23093664     code    10223211
         runq       0                                atom             512625      ets      791672

  Pid                        Name or Initial Func  Percent     Reds    Memory MssQ      State Current Function
  ---------------------------------------------------------------------------------------------------------------------------
  <0.9.0>                         :erlang.apply/2    47.66   901851    284652    0    waiting :erl_prim_loader.loop/3
  <0.49.0>                        :erlang.apply/2    12.57   237834    163492    0    waiting :code_server.loop/1
  <0.43.0>        :application_controller.start/1     8.13   153862    264396    0    waiting :gen_server.loop/7
  <0.1.0>               :erts_code_purger.start/0     7.44   140798     25848    0    waiting :erts_code_purger.wait_for_request/0
  <0.2.0>     :erts_literal_area_collector.start/     7.11   134526      2688    0    waiting :erts_literal_area_collector.msg_loop/4
  <0.57.0>                    :file_server.init/1     6.18   116917    426596    0    waiting :gen_server.loop/7
  <0.64.0>                        :group.server/3     3.46    65443  10784016    0    waiting :group.more_data/6
  <0.79.0>                       :disk_log.init/2     1.85    34950    197252    0    waiting :disk_log.loop/1
  <0.228.0>                           Etop.init/1     1.77    33584   6781840    0    running Process.info/1
  <0.3.0>     :erts_dirty_process_signal_handler.     1.26    23850      2688    0    waiting :erts_dirty_process_signal_handler.msg_loop/0
  ===========================================================================================================================
  ```
  """
  import Etop.Utils, only: [pad: 2, pad_t: 2]

  alias Etop.{Utils, Chart}

  require Logger
  require IEx

  @cols [15, 35, 8, 13, 9, 4, 10, 30]
  @header [
    "Pid",
    "Name or Initial Func",
    "Percent",
    "Reds",
    "Memory",
    "MssQ",
    "State",
    "Current Function"
  ]
  @report_width Enum.sum(@cols) + length(@cols)

  @header_str @header
              |> Enum.zip(@cols)
              |> Enum.with_index()
              |> Enum.map(fn {{str, cols}, i} ->
                case i do
                  0 -> String.pad_trailing(str, cols, " ")
                  7 -> str
                  _ -> String.pad_leading(str, cols, " ")
                end
              end)
              |> Enum.join(" ")
  @separator for _ <- 1..@report_width, do: "="
  @separator_dash for _ <- @separator, do: "-"

  @exs_template """
  defmodule Etop.Agent do
    @name __MODULE__
    def start do
      if Process.whereis(@name), do: stop()
      {:ok, _acc} = Agent.start(fn -> [] end, name: @name)
    end
    def add(item), do: Agent.cast(@name, & [item | &1])
    def stop, do: Agent.stop(@name)
    def get, do: @name |> Agent.get(& &1) |> Enum.reverse()
  end
  IO.puts "usage: data = Etop.Agent.get()"
  alias Etop.Agent, as: A
  {:ok, acc} = A.start()
  ## The following items as generated by Etop

  """

  @doc """
  Get the column width of the given column number.
  """
  def column_width(n), do: Enum.at(@cols, n)

  @doc """
  Create a report of the given processes list, and summary stats.
  """
  def create_report(list, total, stats) do
    stats
    |> create_summary()
    |> create_details(list, total)
  end

  @doc """
  Get the data loaded by compiling the output exs file.
  """
  def get do
    if function_exported?(Etop.Agent, :get, 0), do: apply(Etop.Agent, :get, []), else: nil
  end

  @doc """
  Helper to create and output the report.

  Output options:

  * print to current leader
  * save text format to file
  * save executable format to exs file
  """
  def handle_report(state) do
    %{stats: %{processes: processes, total: total} = stats} = state

    processes
    |> create_report(total, stats)
    |> save_or_print(state)

    state
  end

  @doc """
  Map the given list to the given extract fields.
  """
  def list(entries, fields) when is_list(fields), do: Enum.map(entries, &get_in(&1, fields))

  @doc """
  Map the given list.
  """
  def list(entries, scope, field), do: list(entries, [:summary, scope, field])

  @doc """
  List the cpu usage values.
  """
  def list_cpu(entries), do: list(entries, :load, :cpu)

  @doc """
  List the memory usage fields.
  """
  def list_memory(entries, field \\ :total), do: list(entries, :memory, field)

  @doc """
  Load the given exs file.
  """
  def load(path \\ "/tmp/etop.exs") do
    case Code.eval_file(path) do
      {:ok, _} -> get()
      error -> error
    end
  end

  @doc """
  Get the entry with the max load.

  Gets the entries from `Etop.Agent`
  """
  def max do
    with entries when is_list(entries) <- get(),
         do: max(entries)
  end

  @doc """
  Get the entry with the max load from the given entries list.
  """
  def max(entries) do
    max = Enum.max_by(entries, &get_in(&1, [:summary, :load, :cpu]))
    print(max)
    max
  end

  @doc """
  Print a chart of the given data.
  """
  def plot(list, opts \\ []), do: Chart.puts(list, opts)

  @doc """
  Print a chart of the cpu usage.
  """
  def plot_cpu(entries, opts \\ []) do
    labels = list(entries, [:summary, :time])

    entries
    |> list_cpu()
    |> plot(Keyword.merge([y_label_postfix: "%", title: "CPU Utilization", labels: labels], opts))
  end

  @doc """
  Print a chart of the memory usage.
  """
  def plot_memory(entries, opts \\ []) do
    field = opts[:field] || :total

    labels = list(entries, [:summary, :time])

    entries
    |> list(:memory, field)
    |> Enum.map(&(&1 / (1024 * 1024)))
    |> plot(
      Keyword.merge(
        [width: 80, height: 50, y_label_postfix: "MB", title: "Memory Usage", labels: labels],
        opts
      )
    )
  end

  @doc """
  Print a report.

  Prints a single top entry or a list of top entries to leader or the given file.
  """
  def print(entry, file \\ nil)

  def print(entries, file) when is_list(entries) do
    Enum.each(entries, &print(&1, file))
  end

  def print(%{} = entry, file) do
    []
    |> puts(@separator)
    |> print_summary(entry)
    |> puts("")
    |> puts(@header_str)
    |> puts(@separator_dash)
    |> print_process(entry)
    |> Enum.reverse()
    |> write_report(file)
  end

  @doc """
  Save a report in Elixir terms format.

  Saves the report so that it can be later loaded and analyzed.
  """
  def save_exs_report(report, path) do
    exists? = File.exists?(path)

    File.open(path, [:append], fn fp ->
      unless exists?, do: IO.puts(fp, @exs_template)

      IO.puts(fp, [
        "A.add(",
        inspect(report, limit: :infinity),
        ?),
        10
      ])
    end)
  end

  @doc """
  Get the top n entries.
  """
  def top(entries, num) do
    entries
    |> sort_by_load()
    |> Enum.take(num)
  end

  ###############
  # Private

  defp create_details(report, list, total) do
    l2 = column_width(1)

    items =
      list
      |> Enum.reduce([], fn {pid, reds}, acc ->
        diff = reds.reductions_diff

        try do
          percent = Float.round(diff / total * 100, 2)

          item = %{
            pid: :erlang.pid_to_list(pid),
            name: name_or_initial_fun(reds, l2),
            percent: percent,
            reductions: reds.reductions,
            reds_diff: diff,
            memory: reds.memory,
            msg_q: reds.message_queue_len,
            state: reds.status,
            fun: format_fun(reds.current_function)
          }

          [item | acc]
        rescue
          e ->
            IO.inspect(e)
            IO.inspect(%{diff: diff, reds: reds, total: total}, label: "Bad result")
            acc
        end
      end)
      |> Enum.reverse()

    Map.put(report, :processes, items)
  end

  defp create_summary(stats) do
    time = Utils.local_time() |> NaiveDateTime.to_time() |> to_string()
    cpu = if stats.load, do: stats.load.total, else: "-"

    %{
      summary: %{
        node: stats.node,
        time: time,
        load: %{
          cpu: cpu,
          nprocs: stats.nprocs,
          runq: stats.runq
        },
        memory: stats.memory
      }
    }
  end

  defp dict_initial_call(%{dictionary: dict}) when is_list(dict), do: dict[:"$initial_call"]
  defp dict_initial_call(_), do: nil

  defp format_fun({mod, fun, arity}), do: "#{inspect(mod)}.#{fun}/#{arity}"
  defp format_fun(str) when is_binary(str), do: str
  defp format_fun(_), do: ""

  defp name_or_initial_fun(reds, l2) do
    reds[:registerd_name]
    |> case do
      nil -> format_fun(dict_initial_call(reds) || reds[:initial_call])
      name when is_atom(name) -> name
    end
    |> to_string()
    |> String.replace(~r/^Elixir\./, "")
    |> String.slice(0, l2)
  end

  defp print_process(report, entry) do
    [l1, l2, l3, l4, l5, l6, l7, _l8] = @cols

    entry.processes
    |> Enum.reduce(report, fn p, report ->
      try do
        puts(
          report,
          Enum.join(
            [
              pad_t(p.pid, l1),
              pad(p.name, l2),
              pad(p.percent, l3),
              pad(p.reds_diff, l4),
              pad(p.memory, l5),
              pad(p.msg_q, l6),
              pad(p.state, l7),
              p.fun
            ],
            " "
          )
        )
      rescue
        e ->
          Logger.warn(inspect(e))
          Logger.warn("Bad result: " <> inspect(p))
          report
      end
    end)
    |> puts(@separator)
    |> puts("")
  end

  defp print_summary(report, %{summary: summary}) do
    load = summary.load
    memory = summary.memory

    node = summary.node
    node_len = String.length(node)

    report
    |> puts(node <> pad(summary.time, @report_width - node_len))
    |> summary_line(
      "Load:  cpu  ",
      to_string(load.cpu) <> "%",
      "Memory:  total    ",
      memory.total,
      "     binary",
      memory.binary
    )
    |> summary_line(
      "       procs",
      load.nprocs,
      "processes",
      memory.processes,
      "     code",
      memory.code
    )
    |> summary_line(
      "       runq ",
      load.runq,
      "atom    ",
      memory.atom,
      "      ets",
      memory.ets
    )
  end

  defp puts(report, string) do
    ["\n", string | report]
  end

  defp save_or_print(report, %{format: :exs, file: path}) when is_binary(path),
    do: save_exs_report(report, path)

  defp save_or_print(report, %{file: path}),
    do: print(report, path)

  defp sort_by_load(entries, sorter \\ &>/2) do
    Enum.sort_by(entries, &get_in(&1, [:summary, :load, :cpu]), sorter)
  end

  defp summary_line(report, load_label, load, mem1_label, mem1, mem2_label, mem2) do
    puts(
      report,
      load_label <>
        pad(load, 7) <>
        pad(mem1_label, 40) <> pad(mem1, 15) <> pad_t(mem2_label, 11) <> pad(mem2, 10)
    )
  end

  defp write_report(report, file) when is_binary(file) do
    case File.write(file, report, append: true) do
      :ok -> :ok
      error -> Logger.warn("Could not write to file #{file}, error: #{inspect(error)}")
    end
  end

  defp write_report(report, _) do
    IO.puts(report)
  end
end
